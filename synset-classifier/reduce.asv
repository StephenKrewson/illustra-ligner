% trying out some different viz of the 2048-dim that inception gives back
load('inception.mat');

[N,n] = size(matrix);

no_dims = round(intrinsic_dim(matrix, 'MLE'));
disp(['MLE estimate of intrinsic dimensionality: ' num2str(no_dims)]);

% WOW--MLE says it's 13 dims; best results from PCA on first 2 and then
% laplacian eigenmaps!!!!!!!! (it preserves all data points)
[mappedX, mapping] = compute_mapping(matrix, 'PCA', no_dims);	
figure, scatter3(mappedX(:,1), mappedX(:,2), mappedX(:,3)); title('Result of PCA (3 components)');

[mappedX, mapping] = compute_mapping(matrix, 'Laplacian', no_dims, 7);	
figure, scatter3(mappedX(:,1), mappedX(:,2), mappedX(:,3)); title('Result of Laplacian Eigenmaps'); drawnow
size(mappedX)
size(mapping)

% Now cluster this!
X = mappedX(:,1:3);
eucD = pdist2(X,X);
clustTreeEuc = linkage(eucD,'average');
cophenet(clustTreeEuc,eucD)

[h,nodes] = dendrogram(clustTreeEuc,0);
h_gca = gca;
h_gca.TickDir = 'out';
h_gca.TickLength = [.002 0];
h_gca.XTickLabel = [];

% Get the images; remember to offset by 2 to account for dir symlinks
% we also want to make them all the same size
imagelist = dir('../img/resized/');
for i = 3:length(imagelist)
    imagelist(i).name
end

% https://www.mathworks.com/help/stats/examples/cluster-analysis.html
hidx = cluster(clustTreeEuc,'criterion','distance','cutoff',0.19);
for i = 1:13
    clust = find(hidx==i);
    %clust'
    %length(clust)
    filenames = {imagelist(clust+2).name};
    absopaths = strcat('../img/extracted/',filenames);
    I = imread(absopaths);
    R = imresize(I,[150 100]);
    
    %montage(strcat('../img/extracted/',filenames))
    for j = 1:length(clust)
        %clust(j)
        image = imagelist(clust(j) + 2).name;
        image
    end
    
    scatter3(X(clust,1),X(clust,2),X(clust,3));
    hold on
end
hold off
grid on



% TODO: show charts from different van der Mathods
% go from json mapping to .mat file with string cell array.
% for each clust, generate 
% think about why kernel methods were so bad; some literature on why
% % laplacian eigenmaps GOOD for images; see uchicago dude

%[mappedX, mapping] = compute_mapping(matrix, 'DiffusionMaps', no_dims);	
%figure, scatter(mappedX(:,1), mappedX(:,2)); title('This is the testing one'); drawnow